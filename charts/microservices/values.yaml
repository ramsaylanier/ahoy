# Default values for microservices chart

# Global configuration
global:
  environment: development
  imageRegistry: ghcr.io
  imageTag: latest
  imagePullPolicy: IfNotPresent

# Shell application (Angular frontend)
shell:
  enabled: true
  image: ghcr.io/ahoy-microservices/shell
  tag: latest
  port: 3000
  replicas: 2
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  service:
    type: LoadBalancer
    port: 80
    targetPort: 3000
  ingress:
    enabled: true
    className: nginx
    hosts:
      - host: shell.ahoy.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
  env:
    - name: NODE_ENV
      value: "production"
    - name: API_BASE_URL
      value: "http://api.ahoy.local"

# Auth microservice
auth:
  enabled: true
  image: ghcr.io/ahoy-microservices/auth
  tag: latest
  port: 3001
  replicas: 2
  resources:
    limits:
      cpu: 300m
      memory: 256Mi
    requests:
      cpu: 150m
      memory: 128Mi
  service:
    type: ClusterIP
    port: 3001
  env:
    - name: NODE_ENV
      value: "production"
    - name: JWT_SECRET
      valueFrom:
        secretKeyRef:
          name: auth-secrets
          key: jwt-secret
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: auth-secrets
          key: database-url

# User microservice
user:
  enabled: true
  image: ghcr.io/ahoy-microservices/user
  tag: latest
  port: 3002
  replicas: 2
  resources:
    limits:
      cpu: 300m
      memory: 256Mi
    requests:
      cpu: 150m
      memory: 128Mi
  service:
    type: ClusterIP
    port: 3002
  env:
    - name: NODE_ENV
      value: "production"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: user-secrets
          key: database-url

# Product microservice
product:
  enabled: true
  image: ghcr.io/ahoy-microservices/product
  tag: latest
  port: 3003
  replicas: 2
  resources:
    limits:
      cpu: 300m
      memory: 256Mi
    requests:
      cpu: 150m
      memory: 128Mi
  service:
    type: ClusterIP
    port: 3003
  env:
    - name: NODE_ENV
      value: "production"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: product-secrets
          key: database-url

# Order microservice
order:
  enabled: true
  image: ghcr.io/ahoy-microservices/order
  tag: latest
  port: 3004
  replicas: 2
  resources:
    limits:
      cpu: 300m
      memory: 256Mi
    requests:
      cpu: 150m
      memory: 128Mi
  service:
    type: ClusterIP
    port: 3004
  env:
    - name: NODE_ENV
      value: "production"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: order-secrets
          key: database-url

# Notification microservice
notification:
  enabled: true
  image: ghcr.io/ahoy-microservices/notification
  tag: latest
  port: 3005
  replicas: 2
  resources:
    limits:
      cpu: 300m
      memory: 256Mi
    requests:
      cpu: 150m
      memory: 128Mi
  service:
    type: ClusterIP
    port: 3005
  env:
    - name: NODE_ENV
      value: "production"
    - name: SMTP_HOST
      valueFrom:
        secretKeyRef:
          name: notification-secrets
          key: smtp-host
    - name: SMTP_PORT
      valueFrom:
        secretKeyRef:
          name: notification-secrets
          key: smtp-port
    - name: SMTP_USER
      valueFrom:
        secretKeyRef:
          name: notification-secrets
          key: smtp-user
    - name: SMTP_PASS
      valueFrom:
        secretKeyRef:
          name: notification-secrets
          key: smtp-pass

# API Gateway (optional - for service mesh)
apiGateway:
  enabled: false
  image: nginx:alpine
  port: 80
  replicas: 1
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

# Database (PostgreSQL)
postgresql:
  enabled: true
  image: postgres:15-alpine
  port: 5432
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  env:
    - name: POSTGRES_DB
      value: "ahoy"
    - name: POSTGRES_USER
      valueFrom:
        secretKeyRef:
          name: postgres-secrets
          key: username
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: postgres-secrets
          key: password
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""

# Redis (for caching and sessions)
redis:
  enabled: true
  image: redis:7-alpine
  port: 6379
  replicas: 1
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  persistence:
    enabled: true
    size: 5Gi
    storageClass: ""
